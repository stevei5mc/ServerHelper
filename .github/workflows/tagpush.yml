name: tag push

on:
  push:
    tags:
      - '*'

env:
  GH_TOKEN: ${{ github.token }}
  scriptPath: ".github/workflows/scripts"

jobs:
  Initialize:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_info.outputs.version }}
      repo_name: ${{ steps.get_info.outputs.repo_name }}
      targetSha: ${{ steps.get_info.outputs.targetSha }}
      targetRef: ${{ steps.get_info.outputs.targetRef }}
    steps:
    - name: 获取信息
      id: get_info
      run: |
        echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
        echo "repo_name=${GITHUB_REPOSITORY/${{ github.repository_owner }}//}" >> $GITHUB_OUTPUT
        echo "targetSha=$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_OUTPUT
        echo "targetRef=$(echo ${{ github.ref }} | sed 's/refs\///g' | sed 's/\//\\\//g')" >> $GITHUB_OUTPUT
    - name:  Print info
      run: |
        echo Release version: ${{ steps.get_info.outputs.version }}
        echo Target sha: ${{ steps.get_info.outputs.targetSha }}
        echo Tatget ref: ${{ steps.get_info.outputs.targetRef }}

  build-plugin:
    strategy:
      fail-fast: false
      matrix:
        include: [
          {path: "Nukkit",java-version: '8'},
          {path: "WaterdogPE",java-version: '17'}
        ]
    runs-on: ubuntu-latest
    needs: Initialize
    name: Build plugin
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Setup java ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
    - name: Get project info
      id: getProjectInfo
      env:
        basePath: ./${{ matrix.path }}/src/main
        pomPath: ./${{ matrix.path }}/pom.xml
      run: |
        echo "pom_hash=$(sha256sum ./${{ matrix.path }}/pom.xml|awk '{print $1}')" >> $GITHUB_OUTPUT
        echo "srcPath=${{ env.basePath }}/java/$(dirname $(grep "main:" ${{ env.basePath }}/resources/plugin.yml | awk '{print $2}' | sed 's/\./\//g' | sed 's/"//g'))" >> $GITHUB_OUTPUT
        echo "groupId=$(mvn help:evaluate -f ${{ env.pomPath }} -Dexpression=project.groupId -q -DforceStdout)" >> $GITHUB_OUTPUT
        echo "artifactId=$(mvn help:evaluate -f ${{ env.pomPath }} -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_OUTPUT
        echo "version=$(mvn help:evaluate -f ${{ env.pomPath }} -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
    - name: Print get pom.xml gav info
      run: |
        echo Group id: ${{ steps.getProjectInfo.outputs.groupId }}
        echo Artifact id: ${{ steps.getProjectInfo.outputs.artifactId }}
        echo Version: ${{ steps.getProjectInfo.outputs.version }}
    - name: Replace info
      env:
        srcPath: ${{ steps.getProjectInfo.outputs.srcPath }}
      run: |
        mainClassPath=${{ env.srcPath }}/ServerHelperMain.java
        echo "Main class path: $mainClassPath"
        sed -i 's/{git.commit.id.abbrev}/${{ needs.Initialize.outputs.targetSha }}/g' $mainClassPath
        sed -i 's/{git.branch}/${{ needs.Initialize.outputs.targetRef }}/g' $mainClassPath
        #sed -i 's/{plugin.version}/${{ needs.Initialize.outputs.version }}/g' $mainClassPath
    - name: 修复pom.xml错误的版本号
      if: steps.getProjectInfo.outputs.version != needs.Initialize.outputs.version
      run: mvn versions:set -f ./${{ matrix.path }}/pom.xml -DnewVersion=${{ needs.Initialize.outputs.version }}
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ matrix.name }}_edition-${{ steps.getProjectInfo.outputs.pom_hash }}
        restore-keys: ${{ runner.os }}-maven--${{ matrix.name }}_edition-
    - name: Build project and get artifact hash
      run: |
        bash ${{ env.scriptPath }}/buildMavenProject.sh "${{ steps.getProjectInfo.outputs.artifactId }}" "${{ matrix.path }}"
        bash ${{ env.scriptPath }}/getArtifactIdHash.sh "${{ steps.getProjectInfo.outputs.artifactId }}" "jar" "${{ matrix.path }}"
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.getProjectInfo.outputs.artifactId }}-Release-${{ needs.Initialize.outputs.version }}
        path: ${{ matrix.path }}/staging

  build-Docusaurus:
    name: Build docusaurus
    needs: Initialize
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Setup nodejs 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: 构建
      run: |
        cd Docusaurus
        yarn install --frozen-lockfile
        yarn build
        cd ../
    - name: 上传构建
      uses: actions/upload-pages-artifact@v3
      with:
        path: Docusaurus/build

  release:
    name: Release
    needs: [Initialize,build-plugin,build-Docusaurus]
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        path: staging
        merge-multiple: true
        pattern: ${{ needs.Initialize.outputs.repo_name }}-*
    - name: Organize build resources
      run: bash ${{ env.scriptPath }/organize_resources.sh "${{ needs.Initialize.outputs.repo_name }}"
    - name: Release to github
      uses: ncipollo/release-action@v1.14.0
      with:
        tag: ${{ needs.Initialize.outputs.version }}
        name: ${{ needs.Initialize.outputs.version }}
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyFile: ./docs/changelogs/${{ needs.Initialize.outputs.version }}.md
        artifacts: ./github_releases/*.*
    #这个暂时没有用
    # - name: 发布至minebbs
    #   uses: engsr6982/upload-minebbs@v1.2.0
    #   with: 
    #     minebbs_token: ${{ secrets.MINEBBS_TOKEN }}
    #     resource_id: "12345"
    #     upload_file: ./github_artifact/*.*
    #     update_title: ${{ needs.Initialize.outputs.version }}
    #     update_version: ${{ needs.Initialize.outputs.version }}

  deploy-gitHub-pages:
    name: Deploy gitHub pages
    needs: [build-plugin,build-Docusaurus]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Deploy GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4