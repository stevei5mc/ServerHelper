name: dispatch

on:
  workflow_dispatch:
    inputs:
      buildMode:
        description: 'Build mode'
        required: false
        default: 'Build plugin'
        type: choice
        options:
          - 'Build plugin'
          - 'Build docusaurus'
          - 'Build plugin and docusaurus'
      additionalFunctions:
        description: "Additional functions"
        required: false
        default: 'Not used'
        type: choice
        options:
        - 'Not used'
        - 'PR Approve'
        - 'Deploy gitHub pages'
      PR_ID:
        description: 'PR Approve ID'
        required: false

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  Initialize:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.get_info.outputs.repo_name }}-Dispatch-Build_${{ github.run_number }}
      PR_ID: ${{ steps.get_info.outputs.PR_ID }}
      url: ${{ steps.get_info.outputs.url }}
      targetSha: ${{ env.targetSha }}
      targetRef: ${{ env.targetRef }}
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
    - name: 获取信息
      id: get_info
      run: |
        echo "repo_name=${GITHUB_REPOSITORY/${{ github.repository_owner }}\//}" >> $GITHUB_OUTPUT
        echo "PR_ID=${{ inputs.PR_ID }}" >> $GITHUB_OUTPUT
        echo "url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
        echo "targetSha=$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_ENV
        echo "targetRef=$(echo ${{ github.ref }} | sed 's/refs\///g' | sed 's/heads\///g' | sed 's/\//\\\//g')" >> $GITHUB_ENV
    - name: Get pr info
      if: inputs.additionalFunctions == 'PR Approve'
      uses: stevei5mc/Get-PR-info-action@main
      id: getPrInfo
      with:
        prId: '${{ inputs.PR_ID }}'
    - name: Settings env info
      if: inputs.additionalFunctions == 'PR Approve'
      run: |
        echo "targetSha=$(echo ${{ steps.getPrInfo.outputs.headSha }} | cut -c 1-7)" >> $GITHUB_ENV
        echo "targetRef=$(echo pull\/${{ inputs.PR_ID }}\/merge)" >> $GITHUB_ENV
    - name:  Print info
      run: |
        echo Bases info:
        echo Build mode: ${{ steps.get_info.outputs.buildMode }}
        echo Artifact name: ${{ steps.get_info.outputs.repo_name }}-Dispatch-Build_${{ github.run_number }}
        echo Target sha: ${{ env.targetSha }}
        echo Tatget ref: ${{ env.targetRef }}
        echo Additional functions info:
        echo Functions: ${{ steps.get_info.outputs.additionalFunctions }}
        echo PR Approve ID: ${{ inputs.PR_ID }}
    - name: Summary base info
      uses: johngeorgewright/summary-action@v1.0.0
      with:
        summary: |
          # Base info
          |Build mode|Additional functions|
          |:-:|:-:|
          |${{ inputs.buildMode }}|${{ inputs.additionalFunctions }}|
    - name: Pull request summary
      if: inputs.additionalFunctions == 'PR Approve'
      env:
        summaryFilePath: .github/template/pr-summary.md
      run: |
        ls -la
        gh pr checkout ${{ inputs.PR_ID }}
        ls -la
        sed -i 's/PRID/${{ inputs.PR_ID }}/g;s/PRURL/${{ steps.getPrInfo.outputs.htmlUrl }}/g;s/CommitCounts/${{ steps.getPrInfo.outputs.commits }}/g' ${{ env.summaryFilePath }}
        sed -i 's/AdditionsLineCounts/${{ steps.getPrInfo.outputs.additions }}/g;s/DeletionsLineCounts/${{ steps.getPrInfo.outputs.deletions }}/g' ${{ env.summaryFilePath }}
        sed -i 's/ChangedFilesCounts/${{ steps.getPrInfo.outputs.changedFiles }}/g' ${{ env.summaryFilePath }}
        cat ${{ env.summaryFilePath }} >> $GITHUB_STEP_SUMMARY

  build-plugin:
    if: inputs.buildMode == 'Build plugin' || inputs.buildMode == 'Build plugin and docusaurus'
    strategy:
      fail-fast: false
      matrix:
        include: [
          {name: "Nukkit",path: "Nukkit",java-version: '8'},
          {name: "WaterdogPE",path: "WaterdogPE",java-version: '17'}
        ]
    runs-on: ubuntu-latest
    needs: Initialize
    name: Build plugin
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
    - name: 拉取代码(批准PR专用)
      if: inputs.additionalFunctions == 'PR Approve'
      run: |
        ls -la
        gh pr checkout ${{ inputs.PR_ID }}
        ls -la
    - name: Setup java ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - name: Get project info
      id: getProjectInfo
      env:
        basePath: ./${{ matrix.path }}/src/main
      run: |
        echo "pom_hash=$(sha256sum ./${{ matrix.path }}/pom.xml|awk '{print $1}')" >> $GITHUB_OUTPUT
        echo "srcPath=${{ env.basePath }}/java/$(dirname $(grep "main:" ${{ env.basePath }}/resources/plugin.yml | awk '{print $2}' | sed 's/\./\//g' | sed 's/"//g'))" >> $GITHUB_OUTPUT
        echo "groupId=$(mvn help:evaluate -Dexpression=project.groupId  -q -DforceStdout)" >> $GITHUB_OUTPUT
        echo "artifactId=$(mvn help:evaluate -Dexpression=project.artifactId  -q -DforceStdout)" >> $GITHUB_OUTPUT
        echo "version=$(mvn help:evaluate -Dexpression=project.version  -q -DforceStdout)" >> $GITHUB_OUTPUT
    - name: Show get pom.xml gav info
      run: |
        echo Group id: ${{ steps.getProjectInfo.outputs.groupId }}
        echo Artifact id: ${{ steps.getProjectInfo.outputs.artifactId }}
        echo Version: ${{ steps.getProjectInfo.outputs.version }}
    - name: Replace info
      env:
        srcPath: ${{ steps.getProjectInfo.outputs.srcPath }}
      run: |
        sed -i 's/${git.commit.id.abbrev}/${{ needs.Initialize.outputs.targetSha }}/g' ${{ env.srcPath }}/ServerHelperMain.java
        sed -i 's/${git.branch}/${{ needs.Initialize.outputs.targetRef }}/g' ${{ env.srcPath }}/ServerHelperMain.java
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ matrix.name }}_edition-${{ steps.getProjectInfo.outputs.pom_hash }}
        restore-keys: ${{ runner.os }}-maven--${{ matrix.name }}_edition-
    - name: Build project and get artifact hash
      run: bash .github/workflows/buildMavenProjectAndGetHash.sh "${{ steps.getPomInfo.outputs.artifact-id }}" "${{ matrix.path }}"
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.Initialize.outputs.artifact_name }}-for_${{ matrix.name }}_Edition
        path: ${{ matrix.path }}/staging

  build-Docusaurus:
    if: inputs.buildMode == 'Build docusaurus' || inputs.buildMode == 'Build plugin and docusaurus'
    name: Build docusaurus
    needs: Initialize
    runs-on: ubuntu-latest
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: 拉取代码(批准PR专用)
      if: inputs.additionalFunctions == 'PR Approve'
      run: |
        ls -la
        gh pr checkout ${{ inputs.PR_ID }}
        ls -la
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: 构建
      run: |
        cd Docusaurus
        yarn install --frozen-lockfile
        yarn build
        cd ../
    - name: 上传构建
      uses: actions/upload-pages-artifact@v3
      with:
        path: Docusaurus/build

  PR-Approve:
    if: inputs.additionalFunctions == 'PR Approve' && always()
    name: PR Approve
    needs: [Initialize,build-plugin,build-Docusaurus]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: 准备信息模板
      run: |
        pwd
        mkdir temp
        cat << EOF >> ./temp/url.txt
        ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        EOF
        ls -la ./temp
        ls -la
    - name: 批准PR
      if: needs.build-plugin.result == 'success'
      uses: hmarr/auto-approve-action@v4.0.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        pull-request-number: ${{ inputs.PR_ID }}
    - name: 成功时回复的消息
      if: needs.build-plugin.result == 'success'
      uses: mshick/add-pr-comment@v2.8.2
      with:
        issue: ${{ inputs.PR_ID }}
        allow-repeats: true
        message-path: |
          ./.github/message_template/success_messgae.txt
          ./temp/url.txt
    - name: 失败时回复的消息
      if: failure() || needs.build-plugin.result != 'success'
      uses: mshick/add-pr-comment@v2.8.2
      with:
        issue: ${{ inputs.PR_ID }}
        allow-repeats: true
        message-path: |
          ./.github/message_template/failure_messgae.txt
          ./temp/url.txt

  deploy-gitHub-pages:
    if: inputs.additionalFunctions == 'Deploy gitHub pages'
    name: Deploy gitHub pages
    needs: [build-plugin,build-Docusaurus]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: 部署到 GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4