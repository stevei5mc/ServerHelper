name: dispatch

on:
  workflow_dispatch:
    inputs:
      buildMode:
        description: 'Build mode'
        required: false
        default: 'Build plugin'
        type: choice
        options: ['Build plugin','Build docusaurus','Build plugin and docusaurus']
      additionalFunctions:
        description: "Additional functions"
        required: false
        default: 'Not used'
        type: choice
        options: ['Not used','PR Approve','Deploy gitHub pages']
      PR_ID:
        description: 'PR Approve ID'
        required: false
      artifactRetentionDays:
        description: "Artifact retention days"
        required: false
        default: '90'
        type: choice
        options: ['1','7','14','30','60','90']    

env:
  GH_TOKEN: ${{ github.token }}
  scriptPath: ".github/workflows/scripts"

jobs:
  Initialize:
    runs-on: ubuntu-latest
    outputs:
      PR_ID: ${{ steps.get_info.outputs.PR_ID }}
      url: ${{ steps.get_info.outputs.url }}
      targetSha: ${{ env.targetSha }}
      targetRef: ${{ env.targetRef }}
      prState: ${{ env.prState }}
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
    - name: Summary base info
      uses: johngeorgewright/summary-action@v1.0.0
      with:
        summary: |
          # Base info
          |Build mode|Additional functions|Artifact retention days|
          |:-:|:-:|:-:|
          |${{ inputs.buildMode }}|${{ inputs.additionalFunctions }}|${{ inputs.artifactRetentionDays }}|
    - name: 获取信息
      id: get_info
      uses: ./.github/actions/getProjectInfo
    - name:  Print info
      run: |
        echo Bases info:
        echo Build mode: ${{ inputs.buildMode }}
        echo Target sha: ${{ env.targetSha }}
        echo Tatget ref: ${{ env.targetRef }}
        echo Additional functions info:
        echo Functions: ${{ inputs.additionalFunctions }}
        echo PR Approve ID: ${{ inputs.PR_ID }}

  build-plugin:
    if: (inputs.buildMode == 'Build plugin' || inputs.buildMode == 'Build plugin and docusaurus') || inputs.additionalFunctions == 'PR Approve'
    strategy:
      fail-fast: false
      matrix:
        include: [
          {path: "Nukkit",java-version: '8'},
          {path: "WaterdogPE",java-version: '17'}
        ]
    runs-on: ubuntu-latest
    needs: Initialize
    name: Build plugin
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
    - name: 拉取 PR 代码
      if: inputs.additionalFunctions == 'PR Approve'
      run: |
        ls -la
        gh pr checkout ${{ inputs.PR_ID }}
        ls -la
    - name: Setup java ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - name: Get pom info
      id: getPomInfo
      uses: ./.github/actions/getMvnPomInfo
      with:
        pomPath: ./${{ matrix.path }}/pom.xml
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ steps.getPomInfo.outputs.artifactId }}_edition-${{ steps.getPomInfo.outputs.pomHash }}
        restore-keys: ${{ runner.os }}-maven--${{ matrix.name }}_edition-
    - name: Replace info
      env:
        basePath: ./${{ matrix.path }}/src/main
      run: |
        srcPath=${{ env.basePath }}/java/$(dirname $(grep "main:" ${{ env.basePath }}/resources/plugin.yml | awk '{print $2}' | sed 's/\./\//g' | sed 's/"//g'))
        echo "Src path: $srcPath"
        mainClassPath=$srcPath/ServerHelperMain.java
        echo "Main class path: $mainClassPath"
        sed -i 's/{git.commit.id.abbrev}/${{ needs.Initialize.outputs.targetSha }}/g' $mainClassPath
        sed -i 's/{git.branch}/${{ needs.Initialize.outputs.targetRef }}/g' $mainClassPath
        #sed -i 's/{plugin.version}/${{ steps.getPomInfo.outputs.version }}/g' $mainClassPath
    - name: Build project
      run: bash ${{ env.scriptPath }}/buildMavenProject.sh "${{ steps.getProjectInfo.outputs.artifactId }}" "${{ matrix.path }}"
    - name: Get artifact hash
      run: bash ${{ env.scriptPath }}/getArtifactHash.sh "${{ steps.getProjectInfo.outputs.artifactId }}" "jar" "${{ matrix.path }}/staging"
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.getProjectInfo.outputs.artifactId }}-Dispatch-Build_${{ github.run_number }}
        path: ${{ matrix.path }}/staging
        retention-days: ${{ inputs.artifactRetentionDays }}

  build-Docusaurus:
    if: inputs.buildMode == 'Build docusaurus' || inputs.buildMode == 'Build plugin and docusaurus'
    name: Build docusaurus
    needs: Initialize
    runs-on: ubuntu-latest
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
    - name: 拉取 PR 代码
      if: inputs.additionalFunctions == 'PR Approve'
      run: |
        ls -la
        gh pr checkout ${{ inputs.PR_ID }}
        ls -la
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: 构建
      run: |
        cd Docusaurus
        yarn install --frozen-lockfile
        yarn build
        cd ../
    - name: 上传构建
      uses: actions/upload-pages-artifact@v3
      with:
        path: Docusaurus/build
        retention-days: ${{ inputs.artifactRetentionDays }}

  PR-Approve:
    if: inputs.additionalFunctions == 'PR Approve' && needs.Initialize.outputs.prState == 'open' && always()
    name: PR Approve
    needs: [Initialize,build-plugin,build-Docusaurus]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
    - name: 拉取代码
      uses: actions/checkout@v4
    - name: 准备信息模板
      run: |
        sed -i 's/action_url/${{ needs.Initialize.outputs.url }}/g' .github/template/*.md

  deploy-gitHub-pages:
    if: inputs.additionalFunctions == 'Deploy gitHub pages'
    name: Deploy gitHub pages
    needs: [build-plugin,build-Docusaurus]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: 部署到 GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4